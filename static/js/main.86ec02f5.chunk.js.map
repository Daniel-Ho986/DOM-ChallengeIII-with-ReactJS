{"version":3,"sources":["components/TableCell.jsx","components/TableRow.jsx","components/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","className","Component","TableRow","tableColumn","i","this","columns","push","Table","state","rows","color","coloring","AddColumn","bind","AddRow","ChangeColor","setState","event","target","value","tableRow","row","onClick","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAoBeA,E,kDAhBX,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,oBACIC,UAAU,kB,GAPFC,aCuBTC,E,kDArBX,WAAYH,GAAO,uCACTA,G,qDAKN,IADA,IAAII,EAAc,GACTC,EAAI,EAAGA,EAAIC,KAAKN,MAAMO,QAAU,EAAGF,IACxCD,EAAYI,KACR,cAAC,EAAD,GACWH,IAInB,OACI,6BACKD,Q,GAhBMF,aC2DRO,E,kDA3DX,WAAYT,GAAO,IAAD,8BACd,cAAMA,IAEDU,MAAQ,CACTC,KAAM,EACNJ,QAAS,EACTK,MAAO,GACPC,UAAU,GAId,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAbL,E,qDAiBdT,KAAKY,SAAS,CAACP,KAAML,KAAKI,MAAMC,KAAO,M,kCAIvCL,KAAKY,SAAS,CAACX,QAASD,KAAKI,MAAMH,QAAU,M,kCAGrCY,GACRb,KAAKY,SAAS,CAACN,MAAOO,EAAMC,OAAOC,U,+BAMnC,IADA,IAAIC,EAAW,GACNjB,EAAI,EAAGA,EAAIC,KAAKI,MAAMa,IAAKlB,IAChCiB,EAASd,KACL,cAAC,EAAD,CAEID,QAAWD,KAAKI,MAAMH,SADfF,IAKnB,OACI,sBAAKJ,UAAU,YAAf,UACI,wBAAQA,UAAU,SAASuB,QAASlB,KAAKU,OAAzC,uBACA,wBAAQf,UAAU,SAASuB,QAASlB,KAAKQ,UAAzC,0BACA,yBAAQW,SAAUnB,KAAKW,YAAvB,UACI,wBAAQI,MAAM,MAAd,mBACA,wBAAQA,MAAM,QAAd,qBACA,wBAAQA,MAAM,OAAd,oBACA,wBAAQA,MAAM,SAAd,yBAER,uBAAOpB,UAAU,OAAjB,SACI,gCACCqB,a,GApDGpB,a,MCQLwB,MARf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,OCMS0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86ec02f5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n//Create cell\r\nclass TableCell extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <td \r\n                className=\"tableCell\"\r\n                //onMouseUp = {this.props.mouseUp}\r\n                //onMouseDown = {this.props.mouseDown}\r\n                // onMouseEnter = {this.props.mouseEnter}\r\n                // onClick = {this.props.onClick}\r\n                >\r\n            </td>\r\n         )\r\n    }\r\n}\r\nexport default TableCell;","import React, {Component}from 'react';\r\nimport TableCell from './TableCell';\r\n\r\n//Create row\r\nclass TableRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }    \r\n\r\n    render(){\r\n        let tableColumn = [];\r\n        for (let i = 0; i < this.props.columns + 1; i++){\r\n            tableColumn.push(\r\n                <TableCell\r\n                    key = {i}\r\n                />\r\n            );\r\n        }\r\n        return(\r\n            <tr>\r\n                {tableColumn}\r\n            </tr>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TableRow;","import TableRow from './TableRow';\r\nimport React, {Component} from 'react';\r\n\r\nclass Table extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: 0,\r\n            columns: 0,\r\n            color: \"\",\r\n            coloring: false\r\n\r\n        }\r\n\r\n        this.AddColumn = this.AddColumn.bind(this);\r\n        this.AddRow = this.AddRow.bind(this);\r\n        this.ChangeColor = this.ChangeColor.bind(this);\r\n    }\r\n\r\n    AddRow(){\r\n        this.setState({rows: this.state.rows + 1})\r\n    }\r\n\r\n    AddColumn(){\r\n        this.setState({columns: this.state.columns + 1})\r\n    }\r\n\r\n    ChangeColor(event){\r\n        this.setState({color: event.target.value})\r\n    }\r\n\r\n\r\n    render (){\r\n        let tableRow = [];\r\n        for (let i = 0; i < this.state.row; i++){\r\n            tableRow.push(\r\n                <TableRow\r\n                    key = {i}\r\n                    columns = {this.state.columns}\r\n                />\r\n            );\r\n        }\r\n        return(\r\n            <div className=\"selection\">\r\n                <button className=\"button\" onClick={this.AddRow}> Add Row </button>\r\n                <button className=\"button\" onClick={this.AddColumn}> Add Column </button>\r\n                <select onChange={this.ChangeColor}>\r\n                    <option value=\"red\"> Red </option>\r\n                    <option value=\"brown\"> Brown </option>\r\n                    <option value=\"gray\"> Gray </option>\r\n                    <option value=\"yellow\"> Yellow </option>\r\n                </select>\r\n            <table className=\"Grid\">\r\n                <tbody> \r\n                {tableRow} \r\n                </tbody>\r\n            </table>\r\n            </div>   \r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import Table from './components/Table';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}